// 1、你们的配置化具体是怎么设计跟实现的？
//        在项目初期，先分析每个报表具体需求，从技术实现维度出发，根据报表的页面展示形式、交互行为来分析，因为我们的报表展示基本是各种图表，
//    交互上基本是图表数据下钻、切换不同tab查看不同维度的数据，或者不同图表之间的联动，我们根据展示形式和交互行为是否相似，是否可以通过灵活又不复杂的配置实现，
//    来判断是否可以将报表划分为同一类型，最后将所有报表划分为不同类型，每种类型维护一个config配置文件，将所有config文件汇总在总的config配置文件中，
//    来实现所有报表的汇总；
//        在设计每个类型报表配置化时候，将每个报表模块当成一个图表卡片，并封装成卡片组件，卡片提供比如卡片类型、模块title、接口url等，针对不同类型的图表卡片，
//    例如折线图，会额外提供一些控制折线不同显示样式的配置参数。这些是针对报表的拆分的业务模块组件，是只针对于某个类型报表的，但是我们不同类型报表中的图表，
//    大体上的样式是类似的，只是可能很多细致的点上有区别，所以我们把图表卡片里面的图表提取出来，封装为更加细粒度的通用组件，比如折线图组件，
//    我们都是用echarts图表，在封装时候，我们把我们的业务样式封装为默认样式，然后把一些例如x轴的配置参数，直接将echarts的参数抛出，支持引用时重写，
//    来支持更多类型的报表样式和交互。在图表卡片中，封装处理数据、处理config中取到的配置等逻辑，利用处理好的数据和配置参数来调取图表组件，最终汇总成报表。
//        在新增报表时候，只要满足我们封装的类型，就可以直接在对应类型的config中新增报表配置来实现，修改报表也可以直接修改config配置即可。
// 2、在从 0 - 1 封装支持固定表头和固定列的 table 组件时，遇到了哪些技术挑战？你是如何优化该组件的性能，以确保在大数据量下的流畅显示的？
//        遇到的技术挑战：性能、ios上滑动抖动问题
//            对于table，我们的需求是实现左侧支持固定列，页面滑动到table时候，支持表头固定在顶部。
//            我们使用4个table标签来实现滚动需求，header部分两个table，左侧table固定，右侧table滑动来实现左侧固定列，同时body部分两个table，也是左侧固定右侧滚动来
//        实现固定列，header和body两部分滚动时候，互相带动滚动，将header部分和body分开是为了实现固定表头。在header和body的带动滚动过程中，在安卓机上正常滚动，
//        但是在ios上，滚动时候header和body会错位，产生抖动效果。我当时猜测是我们因为ios在滚动一段距离后松开手指，仍然会有惯性滑动行为，导致header和body错位，
//        我们是采用禁用table模块的自带滚动事件，然后计算手指滚动的距离和方向来手动滚动table。
// 3、二次封装 echarts 和 vant 等组件，必然涉及到对原有组件的定制化改造。在这个过程中，你是如何平衡定制化需求与组件原生功能的兼容性的？
//    有没有考虑过未来组件库升级时，如何减少对二次封装部分的影响？
//        1、在做二次封装时候，尽量按照原生组件推荐的开发方式和数据格式来封装；
//        2、对于一些样式或者交互，需要向原生组件传入参数来实现时，抛出原生组件的参数，支持用户传入参数来重写；
//        3、参数采用组合的方式，提供新参数来控制新封装的内容，将没有用到的原生组件参数暴露，来实现在原生组件之上新增功能；
//        4、关注组件库更新日志，在开发中尽量遵循组件库最佳实践和设计原则，避免使用一些不稳定或者即将废弃的功能。
// 4、采用懒加载方式汇总图表成报表，在实际实现过程中，你是如何确定懒加载的时机和策略的？有没有对懒加载前后的性能数据进行对比分析，能否分享一下具体的数据指标变化？
//        就拿我们这个项目举例，因为我们的报表展示页面是根据config来确定页面显示哪些图表的，如果使用isComponent这些同步加载方式，不管config配置了几个图表，页面都会把全部图表加载出来，
//    造成页面卡顿问题，所以我们在页面上采用懒加载方式，config中配了哪个图表就加载哪个，解决了页面卡顿问题。
//        在其他项目中，我们的报表有页面非常长情况，一个报表上就有很多图表，我们根据IntersectionObserver API来检测元素是否滚动到视口，如果滚动到视口，就加载图表；
//        我们依然是使用IntersectionObserver API来计算首屏主要元素渲染的时长；在该项目中，我们未采用懒加载优化前，页面上的图表渲染很卡顿，采用懒加载后，页面渲染非常流畅；
// 5、对于离线包方案，你是如何管理离线包的更新和版本控制的？如何确保用户在离线状态下使用的是最新且有效的数据？在离线包更新过程中，如何处理可能出现的网络中断等异常情况？
//        我们是将h5代码打包压缩上传到公司内部控制塔并新增版本，在每次打开webview时候，都会判断下有没有新增版本，如果有，先走在线模式，同时启动包下载，如果没有新增版本，
//    直接打开下载好的包。
// 6、在主导 3 人团队参与开发过程中，你是如何分配任务，以充分发挥每个团队成员的优势的？有没有遇到过团队成员之间技术水平差异较大的情况，你是如何解决的？
//        首先在平时的工作中，大家互相都是有合作的，所以对每个人的能力和性格都有大概的了解，在项目开始之前先拉个小会，沟通下每个人的想法和兴趣点，优先让他们根据兴趣点选择自己想做的模块，
//    然后对要做的东西进行任务拆解，整理成表格，让大家自己去选自己想要做的内容，对于剩下没人选择的，根据大家手头的任务数量，还有个人能力，进行分配。
//        对于一些成员能力相对较弱，但是又挑了比较有难度的模块，我会分析说明这个模块的难度情况，然后如果他依然愿意去做，我会协调人来协助，至少可以让他有问题能咨询下的，如果他没选比较难的，
//    那我会优先分配简单的模块，循序渐进，看做完的情况继续分配，但是我还是优先让大家自主选择，只有做自己感兴趣的工作，才会努力把他做好。
// 7、当团队整体进度受到阻碍时，你是如何快速定位问题根源并采取有效的解决措施的？能否分享一个具体的案例，说明你是如何协调各方资源，推动项目进度的？
//        因为我们团队较小，有时候碰上一些问题内部一时想不到怎么解决，比如上次遇到的自定义table滑动都动物问题，我会去找产品和领导协调资源，得知隔壁团队擅长做报表，就去找隔壁领导咨询，
//    找他们内部人员咨询下有哪些合适的解决方案，或者可以去思考的方向，然后我们内部再去想办法解决，隔壁组也不知道的，我自己找不到资源去问的，再去找领导协调资源。
//        有些需求要的比较急，我们人员不足，就去找领导协调其他组帮忙做下支持。制定进度表格，大家认领的模块进度都要及时更新在表格中，我每天下班前都会看下表格进度，有delay的会去沟通下情况，
//    技术问题就协调解决，忙不过来情况，我会比较下任务优先级，如果他的需求确实紧急，会去跟业务沟通，看能不能改下排期，如果排期无法修改，只能去协调其他人或者剩下人加班搞。如果是个人原因
//    造成的delay，我首先会去多push一下，如果实在push不动，就找上级帮忙解决。
// 8、针对离线包的问题
//        我们做的是东南亚大区的业务嘛，像柬埔寨、菲律宾部分地区，网络比着国内肯定是弱的，我们的h5页面又都是依赖网络在线加载的，在弱网状态下肯定是加载缓慢或者直接加载失败的，
//    为了提高我们的用户体验，我们在app中引入离线包，在每次打开webview时候调接口判断下是否有发新版本，如果有，就先打开在线模式，同时开始下载离线包，如果没有，就直接打开本地的离线包。