// 中心管家
// 为了寻求更好的提升业务的方法和方向，需要为各代理区和中心提供一个实时查看各业务线报表的工具，我们开发了【中心管家】项目，
// 该项目中拥有27个报表和10个通知，不同的报表和通知的数据又都来源于不同的业务部门，也就是说报表和通知分别对应不同部门的后端，
// 而前端只是由我主导的3人小团队，为了节省人力成本，我们考虑使用配置化开发，利用配置文件来将封装的卡片汇总成不同报表，
// 具体过程呢，首先通过暴露echarts参数来将图表封装成比较通用、比较细粒度的组件，再把报表中每个模块封装成一个个单独的引入了对应配置的图表的卡片，
// 然后输出一套通用的接口格式给所有后端，跨部门协调后端按照格式来输出接口，最后实现一套前端组件，通过配置控制27个报表，对比其他app，人力成本降低50%；
// 这个过程中，让我觉得比较有难度的就是后端很多，并且都是来自于不同部门，他们部门内部的要求也不一致，有的还是用的鲲鹏来直接生成接口，
// 很难做到统一按照我提供的格式来输出接口，最后也是找上级、产品、直接沟通等方式解决了问题，对于协调沟通能力有很大的考验；
// 在项目开发过程中，也沉淀出了一套组件库，包括利用echarts封装的图表组件、自主研发的table组件、基于vant二次封装的常用组件等等，
// 因为公司做的是全球业务，每个项目基本每个国家都会做一个，将这种通用的最细粒度的组件沉淀到组件库，多个国家共用一套组件，也减少了冗余代码，维护起来也减少了人力成本和时间成本；
// 在折线图等有坐标轴的组件封装过程中，也遇到一些问题，比如echarts的一些属性同时使用会出现bug，像多轴线对齐和利用min和max来计算刻度值不能同时使用，
// 所以刻度值完全是自己计算的，分多种情况来计算实现，在table组件封装过程中，也遇到ios上滑动，表格会抖动问题，最后通过禁用默认滚动，完全靠代码计算距离来滚动的方式解决；
// 因为table组件是完全自主研发的，并且需要支持粘性表头和固定列，比较复杂，最终实现后比较消耗页面性能，造成页面卡顿，采用懒加载方式来优化页面解决页面卡顿问题
// 当时也有想法，想做一个低代码平台，通过可视化页面让业务自己调整报表样式，最后因为一些工时等原因未实现。


// config库、utils库
//     当时是在做业务时候，我们的app因为每个国家都有嘛，工程代码基本都是拷来拷去，一个国家配置有问题，其他国家代码全部都得跟着改，
// 或者一个国家要用到某个工具，基本上其他国家都会用到，所以就为组内开发了config库和utils库，来放一些公共的配置和utils